# Full XOR Training Code
# Created 3 July 2023 by Jared Bake and Bond Headlee
# This code will train 2 in - 2 out chips to XOR behavior.
# The backwards pass uses an incremented voltage and constant hold time that are set in the parameters.

from pyfirmata import Arduino, util
import numpy as np
import time
import pandas as pd
import pyvisa
import requests
import json
import math

# Parameters
holdvalue = 10          # This is the number of seconds the backwards pass voltage is held at. (seconds)
startingvoltage = 12    # This is the lowest voltage for backwards passes. (Volts)
maxepochs = 200
increment = 2.5         # The voltage will increment by this amount between backwards passes. (Volts)

ErrorGoal = .6          # This is the percentage of current that will go through the correct pin to count as trained.
Vin = 3.14              # This is set to the ACTUAL input voltage from the XP Power Supply. (Volts)
samples = 1000000       # Set the number of voltage samples we want to take on each pin

# Configuration to read from Power Supply
url = "http://169.254.7.107/benchInfo"

# payload = 'voltage 3'
headers = {
    # 'Accept': '*/*',
    # 'Accept-Encoding': 'gzip, deflate',
    # 'Accept-Language': 'en-US,en;q=0.9',
    'Connection': 'keep-alive'
    # 'Content-type': 'application/x-www-form-urlencoded',
    # 'Host': '169.254.7.107',
    # 'Origin': 'http://169.254.7.107',
    # 'Referer': 'http://169.254.7.107/protected/control.html',
    # 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36'
}

# Configuration to write to Power Supply
rm = pyvisa.ResourceManager()
rm.list_resources()
supply = rm.open_resource('TCPIP0::169.254.7.107::8003::SOCKET')    # Put your device IDs here
supply.write('output OFF')  # Set the voltage
supply.write('current 0.4')

# Configuration for the Arduino and necessary output pins.
board = Arduino('COM3')
SSR1 = 2
SSR4 = 3
SSR5 = 4
RR1 = 5
RR4 = 6
RR5 = 7
RR8 = 8
# Initialize counters for incrementing.
count1 = 0
count2 = 0
count3 = 0
def MeasureCurrent(pinmode):  # Set the pin mode/pin combination. Mode 1 = 01, Mode 2 = 10, Mode 3 = 11.

    # Turn on all the SSR which sends power to both pins and connected to the Multiplexer
    supply.write('voltage 3.3')
    time.sleep(1)
    board.digital[SSR1].write(pinmode % 2)  # Switch for input 1
    board.digital[SSR4].write(pinmode // 2)  # Switch for input 2
    board.digital[SSR5].write(1)  # Connect the outputs to the MUX

    Voltage = np.zeros((2, samples))  # Create a zeroes array to fill with the voltage samples

    # While loop
    for i in range(2):  # This loops through both output pins
        time.sleep(.1)
        for j in range(samples):  # How often are we sampling??????
            Voltage[i, j] = board.analog[i].read()  # Sample from the analog input and store the value in an array.
    # Extract individual voltage measurements from Voltage array
    V1 = np.mean(Voltage[0, :])
    if V1 < .001:
        V1 = 0
    else:
        V1 = 5 * V1 + .0625 * 25 * V1 * V1 + .0908 * 5 * V1 + .0098  # Scale and adjust for diode voltage drop.

    V2 = np.mean(Voltage[1, :])
    if V2 < .001:
        V2 = 0
    else:
        V2 = 5 * V2 + .0625 * 25 * V2 * V2 + .0908 * 5 * V2 + .0098  # Scale and adjust for diode voltage drop.

    if V1 == 0 and V2 == 0:
        Ratio = 0
    else:
        Ratio = V1 / (V1 + V2)

    # Turn off all logic pins
    board.digital[SSR1].write(0)
    board.digital[SSR4].write(0)
    board.digital[SSR5].write(0)
    return Ratio
def CheckXOR(rat, index):
    # Determine if the percentage of current flowing through each pin matches XOR behavior and required hysteresis.
    if index < 3:
        if rat > ErrorGoal:
            return True, rat
        else:
            return False, rat
    else:
        if rat > (1 - ErrorGoal):
            return True, (1 - rat)
        else:
            return False, (1 - rat)
def ReadCurrent():
    time.sleep(1)   # If this is shorter than 1 second, the power supply will skip voltages.
    # Read the current value from the power supply. Power supply must be open in browser.
    response = requests.request("POST", url, headers=headers)
    output = response.text.split(';')
    current = output[13]
    current = current[0:5]  # Pull out the value of the current.
    return current
def BackwardsPass(count):
    supply.write('voltage ' + str(startingvoltage + (increment * count))    # Hold the voltage at a incremented point.
    time.sleep(holdvalue)    # Hold the voltage for a certain number of seconds.
def end():  # This function turns everything off and quits.
    off()
    print('The program has successfully ended.')
    quit()
def off():  # This turns off all logic pins and the power supply.
    board.digital[SSR1].write(0)
    board.digital[SSR4].write(0)
    board.digital[SSR5].write(0)
    board.digital[RR1].write(0)
    board.digital[RR4].write(0)
    board.digital[RR5].write(0)
    board.digital[RR8].write(0)
    supply.write('output OFF')

if __name__ == "__main__":
    off()
    pins = (1, 2, 3)
    total_XOR = False
    ratio_ar = (0.0, 0.0, 0.0)
    ratio_ar = np.array(ratio_ar)
    worst_pin = 0
    count = 0
    # Configure Arduino for analog input
    it = util.Iterator(board)
    it.start()
    board.analog[0].enable_reporting()
    board.analog[1].enable_reporting()

    supply.write('output ON')   # Turn on the power supply

    while not total_XOR and count < maxepochs:  # Executes when at least 1 pin does not exhibit XOR behavior.
        count = count + 1
        total_XOR = True
        for i in pins:  # Measure the resistances for each pin combination and checks current and XOR behavior.
            current = MeasureCurrent(i)
            XOR = CheckXOR(current, i)

            if not XOR[0]:
                total_XOR = False

            ratio_ar[i - 1] = float(XOR[1])

        if not total_XOR:   # This loop will train the chip by performing a backwards pass on the worst pin combination.
            lowest_ratio = np.min(ratio_ar)
            RMSE = math.sqrt((((1 - ratio_ar[0]) ** 2) + ((1 - ratio_ar[1]) ** 2) + ((1 - ratio_ar[2]) ** 2)) / 3)
            print(count, ': ', ratio_ar, 'The RMSE is: ', RMSE)
            worst_pin = np.where(ratio_ar == lowest_ratio)   # Find the pin combination that is farthest from XOR.
            match worst_pin[0]:    # Run the backwards pass.
                case 0:
                    board.digital[RR1].write(1)
                    board.digital[RR8].write(1)
                    BackwardsPass(count1)
                    count1 += 1
                case 1:
                    board.digital[RR4].write(1)
                    board.digital[RR8].write(1)
                    BackwardsPass(count2)
                    count2 += 1
                case 2:
                    board.digital[RR1].write(1)
                    board.digital[RR4].write(1)
                    board.digital[RR5].write(1)
                    BackwardsPass(count3)
                    count3 += 1
                case _:
                    print('Error with worst pin lol')
            # Disable all backwards pass relays
            board.digital[RR1].write(0)
            board.digital[RR4].write(0)
            board.digital[RR5].write(0)
            board.digital[RR8].write(0)
    if count >= maxepochs:
        print(maxepochs, ' cycles have been executed.')
    else:
        print('Congratulations. XOR behavior has been accomplished.')
    end()
